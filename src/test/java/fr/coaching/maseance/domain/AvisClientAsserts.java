package fr.coaching.maseance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AvisClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvisClientAllPropertiesEquals(AvisClient expected, AvisClient actual) {
        assertAvisClientAutoGeneratedPropertiesEquals(expected, actual);
        assertAvisClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvisClientAllUpdatablePropertiesEquals(AvisClient expected, AvisClient actual) {
        assertAvisClientUpdatableFieldsEquals(expected, actual);
        assertAvisClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvisClientAutoGeneratedPropertiesEquals(AvisClient expected, AvisClient actual) {
        assertThat(expected)
            .as("Verify AvisClient auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvisClientUpdatableFieldsEquals(AvisClient expected, AvisClient actual) {
        assertThat(expected)
            .as("Verify AvisClient relevant properties")
            .satisfies(e -> assertThat(e.getDateAvis()).as("check dateAvis").isEqualTo(actual.getDateAvis()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e -> assertThat(e.getDescriptionAvis()).as("check descriptionAvis").isEqualTo(actual.getDescriptionAvis()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAvisClientUpdatableRelationshipsEquals(AvisClient expected, AvisClient actual) {
        assertThat(expected)
            .as("Verify AvisClient relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getCoachExpert()).as("check coachExpert").isEqualTo(actual.getCoachExpert()));
    }
}
