package fr.coaching.maseance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SeanceReservationCoachAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeanceReservationCoachAllPropertiesEquals(SeanceReservationCoach expected, SeanceReservationCoach actual) {
        assertSeanceReservationCoachAutoGeneratedPropertiesEquals(expected, actual);
        assertSeanceReservationCoachAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeanceReservationCoachAllUpdatablePropertiesEquals(
        SeanceReservationCoach expected,
        SeanceReservationCoach actual
    ) {
        assertSeanceReservationCoachUpdatableFieldsEquals(expected, actual);
        assertSeanceReservationCoachUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeanceReservationCoachAutoGeneratedPropertiesEquals(
        SeanceReservationCoach expected,
        SeanceReservationCoach actual
    ) {
        assertThat(expected)
            .as("Verify SeanceReservationCoach auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeanceReservationCoachUpdatableFieldsEquals(SeanceReservationCoach expected, SeanceReservationCoach actual) {
        assertThat(expected)
            .as("Verify SeanceReservationCoach relevant properties")
            .satisfies(e ->
                assertThat(e.getHeureDebutCreneauReserve())
                    .as("check heureDebutCreneauReserve")
                    .isEqualTo(actual.getHeureDebutCreneauReserve())
            )
            .satisfies(e ->
                assertThat(e.getHeureFinCreneauReserve()).as("check heureFinCreneauReserve").isEqualTo(actual.getHeureFinCreneauReserve())
            )
            .satisfies(e -> assertThat(e.getCanalSeance()).as("check canalSeance").isEqualTo(actual.getCanalSeance()))
            .satisfies(e -> assertThat(e.getTypeSeance()).as("check typeSeance").isEqualTo(actual.getTypeSeance()))
            .satisfies(e -> assertThat(e.getStatutRealisation()).as("check statutRealisation").isEqualTo(actual.getStatutRealisation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeanceReservationCoachUpdatableRelationshipsEquals(
        SeanceReservationCoach expected,
        SeanceReservationCoach actual
    ) {
        assertThat(expected)
            .as("Verify SeanceReservationCoach relationships")
            .satisfies(e -> assertThat(e.getFacture()).as("check facture").isEqualTo(actual.getFacture()))
            .satisfies(e -> assertThat(e.getCoachExpert()).as("check coachExpert").isEqualTo(actual.getCoachExpert()))
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getOffre()).as("check offre").isEqualTo(actual.getOffre()));
    }
}
