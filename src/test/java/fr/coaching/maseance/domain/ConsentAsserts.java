package fr.coaching.maseance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConsentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsentAllPropertiesEquals(Consent expected, Consent actual) {
        assertConsentAutoGeneratedPropertiesEquals(expected, actual);
        assertConsentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsentAllUpdatablePropertiesEquals(Consent expected, Consent actual) {
        assertConsentUpdatableFieldsEquals(expected, actual);
        assertConsentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsentAutoGeneratedPropertiesEquals(Consent expected, Consent actual) {
        assertThat(expected)
            .as("Verify Consent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsentUpdatableFieldsEquals(Consent expected, Consent actual) {
        assertThat(expected)
            .as("Verify Consent relevant properties")
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNecessary()).as("check necessary").isEqualTo(actual.getNecessary()))
            .satisfies(e -> assertThat(e.getAnalytics()).as("check analytics").isEqualTo(actual.getAnalytics()))
            .satisfies(e -> assertThat(e.getMarketing()).as("check marketing").isEqualTo(actual.getMarketing()))
            .satisfies(e -> assertThat(e.getPreferences()).as("check preferences").isEqualTo(actual.getPreferences()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsentUpdatableRelationshipsEquals(Consent expected, Consent actual) {
        // empty method
    }
}
