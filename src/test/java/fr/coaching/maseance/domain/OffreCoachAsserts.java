package fr.coaching.maseance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OffreCoachAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreCoachAllPropertiesEquals(OffreCoach expected, OffreCoach actual) {
        assertOffreCoachAutoGeneratedPropertiesEquals(expected, actual);
        assertOffreCoachAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreCoachAllUpdatablePropertiesEquals(OffreCoach expected, OffreCoach actual) {
        assertOffreCoachUpdatableFieldsEquals(expected, actual);
        assertOffreCoachUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreCoachAutoGeneratedPropertiesEquals(OffreCoach expected, OffreCoach actual) {
        assertThat(expected)
            .as("Verify OffreCoach auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreCoachUpdatableFieldsEquals(OffreCoach expected, OffreCoach actual) {
        assertThat(expected)
            .as("Verify OffreCoach relevant properties")
            .satisfies(e -> assertThat(e.getCanalSeance()).as("check canalSeance").isEqualTo(actual.getCanalSeance()))
            .satisfies(e -> assertThat(e.getTypeSeance()).as("check typeSeance").isEqualTo(actual.getTypeSeance()))
            .satisfies(e -> assertThat(e.getSynthese()).as("check synthese").isEqualTo(actual.getSynthese()))
            .satisfies(e ->
                assertThat(e.getDescriptionDetaillee()).as("check descriptionDetaillee").isEqualTo(actual.getDescriptionDetaillee())
            )
            .satisfies(e -> assertThat(e.getTarif()).as("check tarif").isEqualTo(actual.getTarif()))
            .satisfies(e -> assertThat(e.getDuree()).as("check duree").isEqualTo(actual.getDuree()))
            .satisfies(e -> assertThat(e.getDescriptionDiplome()).as("check descriptionDiplome").isEqualTo(actual.getDescriptionDiplome()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreCoachUpdatableRelationshipsEquals(OffreCoach expected, OffreCoach actual) {
        assertThat(expected)
            .as("Verify OffreCoach relationships")
            .satisfies(e -> assertThat(e.getSpecialite()).as("check specialite").isEqualTo(actual.getSpecialite()))
            .satisfies(e -> assertThat(e.getCoachExpert()).as("check coachExpert").isEqualTo(actual.getCoachExpert()));
    }
}
