package fr.coaching.maseance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FactureAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureAllPropertiesEquals(Facture expected, Facture actual) {
        assertFactureAutoGeneratedPropertiesEquals(expected, actual);
        assertFactureAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureAllUpdatablePropertiesEquals(Facture expected, Facture actual) {
        assertFactureUpdatableFieldsEquals(expected, actual);
        assertFactureUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureAutoGeneratedPropertiesEquals(Facture expected, Facture actual) {
        assertThat(expected)
            .as("Verify Facture auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureUpdatableFieldsEquals(Facture expected, Facture actual) {
        assertThat(expected)
            .as("Verify Facture relevant properties")
            .satisfies(e -> assertThat(e.getTypeFacture()).as("check typeFacture").isEqualTo(actual.getTypeFacture()))
            .satisfies(e ->
                assertThat(e.getDateComptableFacture()).as("check dateComptableFacture").isEqualTo(actual.getDateComptableFacture())
            )
            .satisfies(e -> assertThat(e.getMontant()).as("check montant").isEqualTo(actual.getMontant()))
            .satisfies(e -> assertThat(e.getTva()).as("check tva").isEqualTo(actual.getTva()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureUpdatableRelationshipsEquals(Facture expected, Facture actual) {
        assertThat(expected)
            .as("Verify Facture relationships")
            .satisfies(e -> assertThat(e.getPaiement()).as("check paiement").isEqualTo(actual.getPaiement()));
    }
}
