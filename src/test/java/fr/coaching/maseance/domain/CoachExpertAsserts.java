package fr.coaching.maseance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CoachExpertAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachExpertAllPropertiesEquals(CoachExpert expected, CoachExpert actual) {
        assertCoachExpertAutoGeneratedPropertiesEquals(expected, actual);
        assertCoachExpertAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachExpertAllUpdatablePropertiesEquals(CoachExpert expected, CoachExpert actual) {
        assertCoachExpertUpdatableFieldsEquals(expected, actual);
        assertCoachExpertUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachExpertAutoGeneratedPropertiesEquals(CoachExpert expected, CoachExpert actual) {
        assertThat(expected)
            .as("Verify CoachExpert auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachExpertUpdatableFieldsEquals(CoachExpert expected, CoachExpert actual) {
        assertThat(expected)
            .as("Verify CoachExpert relevant properties")
            .satisfies(e -> assertThat(e.getCivilite()).as("check civilite").isEqualTo(actual.getCivilite()))
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getPrenom()).as("check prenom").isEqualTo(actual.getPrenom()))
            .satisfies(e -> assertThat(e.getDateNaissance()).as("check dateNaissance").isEqualTo(actual.getDateNaissance()))
            .satisfies(e -> assertThat(e.getAdresseEmail()).as("check adresseEmail").isEqualTo(actual.getAdresseEmail()))
            .satisfies(e -> assertThat(e.getNumeroTelephone()).as("check numeroTelephone").isEqualTo(actual.getNumeroTelephone()))
            .satisfies(e -> assertThat(e.getVille()).as("check ville").isEqualTo(actual.getVille()))
            .satisfies(e -> assertThat(e.getCodePostal()).as("check codePostal").isEqualTo(actual.getCodePostal()))
            .satisfies(e -> assertThat(e.getNumeroEtNomVoie()).as("check numeroEtNomVoie").isEqualTo(actual.getNumeroEtNomVoie()))
            .satisfies(e -> assertThat(e.getTarifActuel()).as("check tarifActuel").isEqualTo(actual.getTarifActuel()))
            .satisfies(e ->
                assertThat(e.getFormatProposeSeance()).as("check formatProposeSeance").isEqualTo(actual.getFormatProposeSeance())
            )
            .satisfies(e -> assertThat(e.getPhoto()).as("check photo").isEqualTo(actual.getPhoto()))
            .satisfies(e -> assertThat(e.getPhotoContentType()).as("check photo contenty type").isEqualTo(actual.getPhotoContentType()))
            .satisfies(e -> assertThat(e.getUrlPhotoProfil()).as("check urlPhotoProfil").isEqualTo(actual.getUrlPhotoProfil()))
            .satisfies(e -> assertThat(e.getBio()).as("check bio").isEqualTo(actual.getBio()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachExpertUpdatableRelationshipsEquals(CoachExpert expected, CoachExpert actual) {
        assertThat(expected)
            .as("Verify CoachExpert relationships")
            .satisfies(e ->
                assertThat(e.getSpecialiteExpertises()).as("check specialiteExpertises").isEqualTo(actual.getSpecialiteExpertises())
            )
            .satisfies(e -> assertThat(e.getDiplomes()).as("check diplomes").isEqualTo(actual.getDiplomes()));
    }
}
